#include<stdio.h>
#define TAILLE 17 // Dimensions de la matrice (17x17)
#define TAILLE_MAX 18 // pour afficher les lettres qui font les indices pour le joueur

// Codes ANSI pour les couleurs
#define RESET "\033[0m"   // Réinitialisation des styles
#define FOND_CYAN "\033[46m" // Fond bleu cyan
#define FOND_NOIR "\033[40m"  // Fond noir
#define FOND_BLANC "\033[47m" // Fond blanc
#define FOND_BLEU "\033[45m" // Fond blanc

/**
 * Vérifie si une cellule appartient à l'un des 4 coins rouges de la matrice qui sont non affectables.
 * Coins rouges :
 * - Coin supérieur gauche (lignes 0-3, colonnes 0-3)
 * - Coin inférieur gauche (lignes 13-17, colonnes 0-3)
 * - Coin supérieur droit (lignes 0-3, colonnes 12-17)
 * - Coin inférieur droit (lignes 12-17, colonnes 12-17)
 */
int Coin_Cyan(int i, int j) {
    return (( i>= 0 && i <= 3 && j >= 0 && j <= 3) ||       // Coin supérieur gauche
            (i >= 13 && i <= TAILLE && j >= 0 && j <= 3) ||    // Coin inférieur gauche
            (i >= 0 && i <= 3 && j >= 13 && j <= TAILLE) ||    // Coin supérieur droit
            (i >= 13 && i <= TAILLE && j >= 13 && j <= TAILLE));   // Coin inférieur droit
}

/**
 * Affiche une cellule selon sa position :
 * - Rouge si la cellule est dans un coin rouge.
 * - Alternance blanche/noire dans le reste de la matrice.
 */

void afficher_chaine_sur_bande(const char* chaine, const char* couleur){
    printf("%s%s%s\n",couleur,chaine, RESET);
}

void afficher_Cellule(int i, int j) {

    //char lettre=[A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R'];
    //int chiffres=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
    int pos_tab=0;
    char lettre[]="ABCDEFGHIJKLMNOPQR ";
    int l;
    char tab_alpha[17];
    if (i==17) {
           // afficher_chaine_sur_bande("ABCDEFGHIJKLMNOPQR",FOND_CYAN);
       while (j<1)
        {
            afficher_chaine_sur_bande(" A B C D E F G H I J K L M N O P Q R",FOND_BLEU);
            //printf(FOND_CYAN "  " RESET);
            //printf("%c",lettre[j]);  
            break;          
        }    
    }
  //  else if  (j==17 && 0<=i<=17){
    //}


    else if (Coin_Cyan(i, j)) {
        printf(FOND_CYAN "  " RESET); // Fond rouge
    } 
    else {
        // Alternance : blanc si (ligne + colonne) est pair, noir sinon
        if ((i + j) % 2 == 0) {
            printf(FOND_BLANC "  " RESET);
        } else {
            printf(FOND_NOIR "  " RESET);
        }
    }

}

/**
 * Affiche la matrice complète avec un damier et des coins rouges pour les cases non affectables.
 */
void afficher_Matrice() {
    char* lettre;
    //lettre=[A,B];
    for (int i = 0; i < TAILLE+1; i++) {
        for (int j = 0; j < TAILLE+1; j++) {
            afficher_Cellule(i, j);}
        printf("\n"); // Saut de ligne après chaque rangée
        
            
        
    }
}

/**
 * Point d'entrée principal.
 */
int main() {
    printf("Matrice alternée (damier blanc/noir) avec coins rouges :\n\n");
    afficher_Matrice();

    return 0;
}
