#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Définition des constantes pour les types de pions et les couleurs
#define PION_BLEU 1
#define DAME_BLEU 2
#define PION_ROUGE 3
#define DAME_ROUGE 4
#define PION_JAUNE 5
#define DAME_JAUNE 6
#define PION_VERT 7
#define DAME_VERT 8
#define CASE_VIDE 0

// Dimensions du plateau
#define TAILLE 17 // Le plateau est 17x17

// Codes ANSI pour les couleurs
#define RESET "\033[0m"   // Réinitialisation des styles
#define FOND_CYAN "\033[46m" // Fond cyan
#define FOND_NOIR "\033[40m"  // Fond noir
#define FOND_BLANC "\033[47m" // Fond blanc
#define TXT_BLEU "\033[34m"   // Texte bleu

// Structure du plateau de jeu
typedef struct {
    int index[TAILLE][TAILLE]; // État du plateau
    int nb_bleu, nb_rouge, nb_jaune, nb_vert; // Nombre de pions pour chaque couleur
} Damier;

// Structure pour représenter une case
typedef struct {
    int numero;  // Numéro de la case
} Case_debut, Case_fin, Case_intermediaire;

// Structure pour représenter un déplacement
typedef struct {
    Case_debut case_i;  // Case de départ
    Case_fin case_f;    // Case d'arrivée
    char* Mouvement;    // Type de mouvement
    char* Commentaire;  // Commentaire sur le mouvement
    struct Deplacement* Mouv_suivant; // Pointeur vers le prochain mouvement
} Deplacement;

typedef enum {
    LIBRE, 
    OCCUPEE, 
    NON_AFFECTABLE
} EtatCase;

typedef enum{
    AvG,
    AvD,
    PriseAvG,
    PriseAvD,
    PriseArG,
    PriseArD,
    ArG,
    ArD,
    Aucun
} Mouvement;

typedef struct {
    int i; // Ligne
    int j; // Colonne
} Case;

// Joueur
typedef enum {
    Rouge,
    Vert,
    Bleu,
    Jaune    
} Couleur_joueur;


// Fonction pour vérifier si une cellule appartient à un coin cyan
int Coin_Cyan(int i, int j) {
    return ((i >= 0 && i < 4 && j >= 0 && j < 4) ||       // Coin supérieur gauche
            (i >= 13 && i < TAILLE && j >= 0 && j < 4) || // Coin inférieur gauche
            (i >= 0 && i < 4 && j >= 13 && j < TAILLE) || // Coin supérieur droit
            (i >= 13 && i < TAILLE && j >= 13 && j < TAILLE)); // Coin inférieur droit
}

// Initialise le damier
void init_damier(Damier* jeu) {
    jeu->nb_bleu = 22;
    jeu->nb_rouge = 22;
    jeu->nb_jaune = 22;
    jeu->nb_vert = 22;

    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            jeu->index[i][j] = CASE_VIDE;
        }
    }

    for (int i = 0; i < 5; i++) {
        for (int j = 4; j < 13; j++) {
            if ((i + j) % 2 == 1) {
                jeu->index[i][j] = PION_BLEU;
            }
        }
    }

    for (int i = 12; i < 17; i++) {
        for (int j = 4; j < 13; j++) {
            if ((i + j) % 2 == 1) {
                jeu->index[i][j] = PION_ROUGE;
            }
        }
    }

    for (int i = 4; i < 13; i++) {
        for (int j = 12; j < TAILLE; j++) {
            if ((i + j) % 2 == 1) {
                jeu->index[i][j] = PION_JAUNE;
            }
        }
    }

    for (int i = 4; i < 13; i++) {
        for (int j = 0; j < 5; j++) {
            if ((i + j) % 2 == 1) {
                jeu->index[i][j] = PION_VERT;
            }
        }
    }
}

void afficher_Cellule(int i, int j, int index[TAILLE][TAILLE]) {
    if (Coin_Cyan(i, j)) {
        printf(FOND_CYAN "  " RESET);
    } else {
        switch (index[i][j]) {
            case PION_BLEU:
                printf(FOND_NOIR TXT_BLEU " ●" RESET);
                break;
            case DAME_BLEU:
                printf(FOND_NOIR TXT_BLEU " o" RESET);
                break;
            case PION_ROUGE:
                printf(FOND_NOIR "\033[31m ●" RESET);
                break;
            case DAME_ROUGE:
                printf(FOND_NOIR "\033[31mO" RESET);
                break;
            case PION_JAUNE:
                printf(FOND_NOIR "\033[33m ●" RESET);
                break;
            case DAME_JAUNE:
                printf(FOND_NOIR "\033[33m O " RESET);
                break;
            case PION_VERT:
                printf(FOND_NOIR "\033[32m ●" RESET);
                break;
            case DAME_VERT:
                printf(FOND_NOIR "\033[32m O " RESET);
                break;
            case CASE_VIDE:
                if ((i + j) % 2 == 0) {
                    printf(FOND_BLANC "  " RESET);
                } else {
                    printf(FOND_NOIR "  " RESET);
                }
                break;
            default:
                printf(" ? ");
                break;
        }
    }
}

void afficher_Damier(Damier* jeu) {
    printf("    ");
    for (int j = 0; j < TAILLE; j++) {
        printf(TXT_BLEU "%c " RESET, 'a' + j);
    }
    printf("\n");

    for (int i = 0; i < TAILLE; i++) {
        printf(TXT_BLEU " %c " RESET, 'A' + i);
        for (int j = 0; j < TAILLE; j++) {
            afficher_Cellule(i, j, jeu->index);
        }
        printf("\n");
    }
}

int couleur_de_case(Damier* jeu, int x, int y){ // x depart, y arrivee
    switch(jeu->index[x][y]){
    case PION_BLEU:
        return ( Bleu);
    case PION_ROUGE:
        return ( Rouge);
    case PION_JAUNE:
        return( Jaune);
    case PION_VERT:
        return (Vert);
    }
}

Damier* mvt(Damier* jeu, Couleur_joueur couleur){
    Case case_debut, case_fin;

    printf("Entrez la case de départ (i j) : ");
    scanf("%d %d", &case_debut.i, &case_debut.j);

    printf("Entrez la case de fin (i j) : ");
    scanf("%d %d", &case_fin.i, &case_fin.j);
    case_debut.j=case_debut.j+1;
    case_fin.j=case_fin.j+1;
    printf("%d",case_fin.j);
    printf("%d",case_debut.j);

    if (jeu->index[case_debut.i][case_debut.j] == LIBRE)
    {
        case_debut.j=case_debut.j-1;
        case_fin.j=case_fin.j-1;
        printf("ok");
        int chiffre1=abs(case_debut.j- case_debut.i);
        int chiffre2=abs(case_fin.j- case_fin.i);
        printf("%d %d",chiffre1,chiffre2);
        if (abs(case_debut.j- case_debut.i)==abs(case_fin.j- case_fin.i)){
            printf("okk");
            if(abs(case_debut.j- case_debut.i)==1){ //mvmt simple
                printf("okkk");
                switch (couleur) {
                    case Rouge:
                        if (case_debut.j- case_debut.i==-1){
                            printf("Mouvement valide\n");
                            jeu->index[case_debut.i][case_debut.j] = CASE_VIDE;  // Vide la case de départ
                            jeu->index[case_fin.i][case_fin.j] = couleur-1;    // Place le pion à la case d'arrivée
                        }
                        break;
                    case Jaune:
                        if (case_debut.j- case_debut.i==1){
                            printf("Mouvement valide\n");
                            jeu->index[case_debut.i][case_debut.j] = CASE_VIDE;  // Vide la case de départ
                            jeu->index[case_fin.i][case_fin.j] = couleur-1;    // Place le pion à la case d'arrivée
                        }
                        break;
                    case Bleu:
                        printf("%d",case_fin.j);
                        printf("%d",case_fin.i);
                        if (case_fin.j- case_fin.i==1){
                            printf("Mouvement valide\n");
                            jeu->index[case_debut.i][case_debut.j] = CASE_VIDE;  // Vide la case de départ
                            jeu->index[case_fin.i][case_fin.j] = couleur-1;    // Place le pion à la case d'arrivée
                        }
                        break;
                    case Vert:
                        if (case_fin.j- case_fin.i==1){
                            printf("Mouvement valide\n");
                            jeu->index[case_debut.i][case_debut.j] = CASE_VIDE;  // Vide la case de départ
                            jeu->index[case_fin.i][case_fin.j] = couleur-1;    // Place le pion à la case d'arrivée
                        }
                        break;
                    default: 
                        printf("Mouvement est invalide.\n");
            }}
            else{
                if(abs(case_debut.j- case_debut.i)==3){ //mvmt avec saut {
                    printf("Mouvement valide");
                    Case case_intermediaire;
                    case_intermediaire.i=(case_debut.j - case_debut.i)/2+case_debut.j;
                    case_intermediaire.j=(case_fin.j - case_fin.i)/2 + case_fin.j;
                    if (jeu-> index[case_intermediaire.i][case_intermediaire.j]==OCCUPEE){
                        if (couleur=!couleur_de_case(jeu,case_intermediaire.i,case_intermediaire.j)){
                            jeu->index[case_debut.i][case_debut.j] = CASE_VIDE;  // Vide la case de départ
                            jeu->index[case_intermediaire.i+1][case_intermediaire.j+1] = OCCUPEE;  // Vide la case de départ
                            jeu->index[case_fin.i][case_fin.j] = couleur;    // Place le pion à la case d'arrivée
                        
                        }
                        else{
                            printf("Mouvement invalide.\n");
                        }
                    }
                    else{
                        printf("Mouvement invalide.\n");
                    }
                }
                //printf("Mouvement invalide\n");
    
            }
        }
    }
    else {
        printf("mouvement interdit.\n");
    }
    return jeu;
}
int main(){
    Damier jeu;
    Damier* jeux;
    init_damier(&jeu);
    afficher_Damier(&jeu);
    jeux=mvt(&jeu,Bleu);
    afficher_Damier(jeux);
    afficher_Damier(&jeu);
    return 0;
}d
